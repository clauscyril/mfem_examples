load "msh3"
load "Element_P3" // ou autre selon le besoin de précision

real Ri = 9.6e-3/2.;
real height = 7.6e-3;
real w = 5.3e-3;
real Rm = Ri + w/2;
real Bpeak = 10e-3;

real rho = 4.24e-2;
real sigma = 1.48e-1;
real eps = 2.68e-6;
real mu = 2200.0 * 4e-7 * pi;

int N = 24;
real fc0 = 50e3;
real fcend = 2e6;

real fcmu = 1e6;
real tau;

ofstream data("data.csv");
data << "fc;Ploss" << endl;

real u = log(fc0);
real uend = log(fcend);
real deltau = (uend - u)/N;

for (int i = 0; i <= N; ++i) {
    real fc = exp(u + i*deltau);
    real omega = 2*pi*fc;
    tau = 1.0/(2*pi*fcmu);

    complex j = 1i;
    complex rhoeq = rho + 1. / (sigma + j*omega*eps);
    complex mueq = mu * j * omega / (1.0 + tau * j * omega);

    // Mesh (2D axisymétrique RZ)
    real rmin = Ri, rmax = Ri + w;
    real zmin = 0, zmax = height;
    mesh Th = square(50, 50, rmin + (rmax - rmin)*x, zmin + (zmax - zmin)*y);

    fespace Vh(Th, P2);
    Vh Htheta, v;

    // Champ magnétique imposé en bord (approximation)
    func Hzexact = sqrt(2)*Bpeak/abs(mu) * Rm /(2*x);

    // Problème variationnel
    varf vPb(Htheta, v) =
        int2d(Th)(
            (rhoeq)*dx(Htheta)*dx(v)
          + (rhoeq)*dy(Htheta)*dy(v)
          + mueq*Htheta*v
        )
      + on(1, Htheta=Hz_exact); // bord fictif ici à adapter

    matrix A = vPb(Vh, Vh, solver=LU);
    real[int] rhs = vPb(0, Vh);
    Htheta[] = A^-1 * rhs;

    // Pertes (approchées)
    real Ploss = int2d(Th)((1./rho_eq).real * (dx(Htheta)^2 + dy(Htheta)^2));
    real volume = pi * ((rmax^2 - rmin^2)/2) * height;
    real Pvol = Ploss / volume;

    data << fc << ";" << Pvol << endl;
}
